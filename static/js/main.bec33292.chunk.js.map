{"version":3,"sources":["components/Form.component.js","components/Todo.component.js","components/TodoList.component.js","App.js","serviceWorker.js","index.js"],"names":["Form","setInputText","todos","setTodo","inputText","setStatus","type","className","onChange","e","target","value","onClick","preventDefault","title","id","Math","random","completed","name","Todo","map","item","filter","t","TodoList","FilteredTodos","todo","key","App","useState","status","setFilteredTodos","useEffect","manageLocalStorage","localStorage","setItem","JSON","stringify","localTodo","getItem","parse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bec33292.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\n\r\nconst Form = ({ setInputText, todos, setTodo, inputText, setStatus }) => {\r\n\r\n    const inputHandler = (e) => {\r\n        setInputText(e.target.value)\r\n    }\r\n\r\n    const formSubmit = (e) => {\r\n        e.preventDefault();\r\n        setTodo([\r\n            ...todos,\r\n            {\r\n                title: inputText,\r\n                id: Math.random() * 1000,\r\n                completed: false\r\n            }\r\n        ]);\r\n        setInputText('');\r\n    }\r\n\r\n    const handleStatus = (e) => {\r\n        setStatus(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <form>\r\n            <input type=\"text\" className=\"todo-input\" onChange={inputHandler} value={inputText} />\r\n            <button className=\"todo-button\" onClick={formSubmit}   >\r\n                <i className=\"fas fa-plus-square\"></i>\r\n            </button>\r\n            <div className=\"select\">\r\n                <select name=\"todos\" onChange={handleStatus} className=\"filter-todo\">\r\n                    <option value=\"all\">All</option>\r\n                    <option value=\"completed\">Completed</option>\r\n                    <option value=\"pending\">Pending</option>\r\n                </select>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\n\r\nexport default Form;","import React from 'react';\r\n\r\n\r\n\r\nconst Todo = ({ title, id, completed, setTodo, todos }) => {\r\n    const deleteTodo = () => {\r\n        setTodo(todos.filter(t => t.id !== id))\r\n    }\r\n\r\n    const changeToCompleted = () => {\r\n        setTodo(todos.map((item) => {\r\n            if (item.id === id) {\r\n                return { ...item, completed: !item.completed }\r\n            }\r\n            return item;\r\n        }));\r\n    }\r\n    return (\r\n        <div className=\"todo\">\r\n            <li className={`todo-item ${completed ? \"completed\" : \"\"}`}>{title}</li>\r\n            <button className=\"complete-btn\" onClick={changeToCompleted} ><i className=\"fas fa-check\"></i></button>\r\n            <button className=\"trash-btn\" onClick={deleteTodo}><i className=\"fas fa-trash\"></i></button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo;","import React from 'react';\r\n\r\n// import component\r\nimport Todo from './Todo.component'\r\n\r\n\r\nconst TodoList = ({ todos, setTodo, FilteredTodos }) => {\r\n    return (\r\n        <div className=\"todo-container\">\r\n            <ul className=\"todo-list\">\r\n                {FilteredTodos.map(todo => (\r\n                    <Todo title={todo.title} id={todo.id} completed={todo.completed} setTodo={setTodo} key={todo.id} todos={todos} />\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\nexport default TodoList;","import React, { useState, useEffect } from 'react';\nimport './App.css';\n\n// importing components\nimport Form from './components/Form.component'\nimport TodoList from './components/TodoList.component'\n\n\n\nfunction App() {\n\n  const [inputText, setInputText] = useState(\"\");\n  const [todos, setTodo] = useState([]);\n  const [status, setStatus] = useState('all');\n  const [FilteredTodos, setFilteredTodos] = useState([]);\n\n  // run once only when app starts\n  useEffect(() => manageLocalStorage(), []);\n\n  // useEffect\n  useEffect(() => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n    switch (status) {\n      case \"pending\":\n        setFilteredTodos(todos.filter((item) => item.completed === false))\n        break;\n      case \"completed\":\n        setFilteredTodos(todos.filter((item) => item.completed === true))\n        break;\n      default:\n        setFilteredTodos(todos);\n        break;\n    }\n\n  }, [todos, status]); // use effect runs every time the state inside [] changes whereas runs only once when page reloads if [] is empty\n\n  const manageLocalStorage = () => {\n    // localStorage.setItem(\"todos\", JSON.stringify(todos));\n\n    let localTodo = localStorage.getItem(\"todos\");\n    setTodo(JSON.parse(localTodo))\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header><h1>Todo List</h1></header>\n      <Form setInputText={setInputText}\n        inputText={inputText}\n        todos={todos}\n        setTodo={setTodo}\n        setStatus={setStatus}\n      />\n      <TodoList todos={todos} FilteredTodos={FilteredTodos} setTodo={setTodo} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}